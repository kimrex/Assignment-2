#include <iostream>
#include <iomanip?

using namespace std;
int main()
{
//Given constants
const int MAX_ARRAY_SIZE = 18;
const int MIN_ARRAY_SIZE = 8;
const int MAX_PIECES = 72; 
const int NOPLAYER = 0;
const int WHITEWINS = 1;
const int REDWINS = 2;
const int NOONEWINS = 0;
const int WHITESOLDIER = 1;
const int WHITEMULE = 2;
const int WHITEKING = 3;
const int REDSOLDIER = 4;
const int REDMULE = 5;
const int REDKING = 6;
const int WHITEPLAYER = 1;
const int REDPLAYER = 2;

//Prompting for checker piece to move

int movepiece = 0;
while ()
{
cout << "Enter the square number of the checker you want to move”;
cin >> movepiece;

if (!(cin >> movepiece))
{
 cerr << "ERROR: You did not enter an integer\n;"
 cout << "ERROR: Try again";
 continue;
}
else if (movepiece > board || movepiece < board)
{
 cerr << "ERROR: That square is not on the board.\n";
 cout << "Try again";
continue;
}
else if (movepiece == RM || movepiece == RS)
{
 cerr << "ERROR: That square contains an opponent’s checker.\n";
 cout << "Try again";
 continue;
}
else if (movepiece == EMPTYSPACE)
{
 cerr << "ERROR: You can jump with another checker, you may not move your chosen checker.";
 cout << "You can jump using checkers on the following squares: " << countJump
 continue;
}
else if (checker cannot jump)
{
 cerr << "ERROR: There is no legal move for this checker.";
 cout << "Try again";
 continue;
}
}

//Prompt player on which space they want to move to

while ()
{
int movespace = 0;
cout << " Enter the square number of the square you want to move your checker to";
cin >> movespace;

if (!(cin >> movespace))
{
 cerr << "ERROR: You did not enter an integer.";
 cout << "Try again";
 continue;
}
else if (movespace > board || movespace < board)
{
 cerr << "ERROR: It is not possible to move to a square that is not on the board.";
 cout << "Try again";
 continue;
}

//call MakeMove to make move
//Print board

//function CountMove1Squares
int CountMove1Squares(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard, int player, int xLocArray[],  int yLocArray[]);

yLocArray[] = {-1}
xLocArray[] = {-1}

IsMove1Squares( )

int x = 0;
xLocArray[x] = xindex;
if (xLocArray[x] ==0)
{
 x++;
}












}
//initializing given functions
void InitializeBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],

  int numRowsInBoard);

void DisplayBoard(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], 

  int numRowsInBoard);

int CountJumps(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], 

  int numRowsInBoard, int player, int xLocArray[], int yLocArray[]);

bool CheckList(int inArray1[], int inArray2[], int xIndex, int yIndex);

int CountMove1Squares(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE],

  int numRowsInBoard, int player, int xLocArray[],  int yLocArray[]);

bool IsMove1Square(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], 

  int numRowsInBoard, int player, int xLoc, int yLoc); 

bool IsJump(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], 

  int numRowsInBoard, int player, int xLoc, int yLoc); 

bool MakeMove(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], 

  int numRowsInBoard, int player, int fromSquareNum, 

  int toSquareNum, bool &jumped);

bool CheckWin(int CMCheckersBoard[MAX_ARRAY_SIZE][MAX_ARRAY_SIZE], int numRowsInBoard);







